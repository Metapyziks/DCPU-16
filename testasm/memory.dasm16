			; Memory allocation test
			; By Metapyziks
			
			SET [0x9fff], 0x0000
			SET [0xa000], 0x4000
			SET PC, init
:malloc
			SET PUSH, X
			SET PUSH, Y
			SET PUSH, Z
			SET PUSH, I
			SET PUSH, J
			SET I, 0
			SET J, 0
			SET X, [0x9fff]
			IFE X, 0x0001
				SET PC, __malloc__filled
:__malloc__empty
			SET X, [0xa000+I]
			SET Y, I
			ADD Y, X
			SET Z, X
			IFG I, 0
				ADD Z, 1
			IFG 0x4000, X
				ADD Z, 1
			IFG Z, A
				SET PC, __malloc__allocate
			ADD I, X
:__malloc__filled
			SET X, [0xa000+I]
			SET J, I
			ADD I, X
			SET PC, __malloc__empty
:__malloc__allocate
			IFE I, 0
				SET PC, __malloc__allocate_0
			ADD [0xa000+J], A
			SUB I, 1
			ADD X, 1
			SET PC, __malloc__allocate_1
:__malloc__allocate_0
			SET [0x9fff], 0x0001
			SET Y, A
			ADD Y, 1
			SET [0xa000], Y
:__malloc__allocate_1
			IFE X, A
				SET PC, __malloc__allocate_2
			SET J, I
			ADD J, A
			SUB X, A
			SUB X, 1
			SET [0xa001+J], X
			SET PC, __malloc__allocate_3
:__malloc__allocate_2
			ADD I, X
			ADD [0xa000+J], [0xa000+I]
			SUB I, X
:__malloc__allocate_3
			SET A, I
			ADD A, 0xa001
			SET J, POP
			SET I, POP
			SET Z, POP
			SET Y, POP
			SET X, POP
			SET PC, POP
:init
			SET A, 0x04
			JSR malloc
			SET [A+0], 0xffff
			SET [A+1], 0xdead
			SET [A+2], 0xbeef
			SET [A+3], 0xffff
			
			SET A, 0x02
			JSR malloc
			SET [A+0], 0x1234
			SET [A+1], 0x5678
			
			SET A, 0x10
			JSR malloc
			SET I, 0
:loop
			SET [A], I
			ADD A, 1
			ADD I, 1
			IFG 0x10, I
				SET PC, loop		
:end
			DAT 0x0000
			